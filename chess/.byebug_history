exit
piece
piece.possible_moves
king_possible_moves
piece.possible_moves
c
king_possible_moves
piece.possible_moves
c
king_possible_moves
piece.possible_moves
c
king_possible_moves
piece.possible_moves
c
king_possible_moves
piece.possible_moves
c
piece.possible_moves
king_possible_moves
piece.location
c
king_possible_moves
piece.location
c
king_possible_moves
piece.location
c
king_possible_moves
piece.location
exit
exi
c
king_possible_moves
c
king_possible_moves
piece.location
c
piece.location
c
piece.location
c
piece.location
c
piece.location
king_possible_moves
c
king_possible_moves
piece.location
c
piece.location
pice.location
c.location
king_possible_moves
c
king_possible_moves
c
king_possible_moves
exit
king_possible_moves
piece.location
c
piece.location
c
piece.location
c
piece.location
c
piece.location
c
piece.location
c
piece.location
c
piece.location
c
piece.location
piece
exit
c
piece.possible_moves
c
piece.possible_moves
c
piece.possible_moves
c
piece.possible_moves
c
piece.possible_moves
c
piece.possible_moves
c
piece.possible_moves
c
piece.possible_moves
c
piece.possible_moves
c
piece.possible_moves
c
piece.possible_moves
c
piece.possible_moves
c
king.possible_moves
piece.possible_moves
c
piece.possible_moves
piece
exit
king_possible_moves
exit
[1,2,nil,nil,4].compact
[1,2,nil,nil,4].truncate
[1,2,nil,nil,4].truncatye
king
exit
grid.flatten.reject { |piece| piece == '.' || piece.nil? }.count
a.count
a
a = grid.flatten
grid.flatten
grid.flatten.reject { |piece| piece == '.' || piece.nil? }
grid
a
a = grid.flatten.reject { |piece| piece == '.' || piece.nil? }
grid.flatten.reject { |piece| piece == '.' || piece.nil? }
grid.count
grid.first.count
grid.count
grid.select { |piece| piece.is_a?(Pieces::King) }
grid.count
grid
grid.class
grid.first.select { |piece| piece.is_a?(Pieces::King) }
grid.first.find { |piece| piece.is_a?(Pieces::King) }
grid.first.select { |piece| piece.is_a?(Pieces::King) }
grid.first.select { |piece| piece != "." && piece.color != player.color && piece.is_a?(Pieces::King) }
grid.first.select { |piece| piece != "." && piece.color != player.color }
grid.first.find { |piece| piece != "." && piece.color != player.color }
grid.first.find { |piece| piece != "." && piece.color != player.color && piece.is_a?(Pieces::King) }
grid.first.find { |piece| piece != "." && piece.color != player.color }
grid.first.find { |piece| piece != "." }
king
exit
grid.first
grid.frist
grid
grid.find { |piece| piece.first != "." && piece.first.color != player.color && piece.first.is_a?(Pieces::King) }
king
exit
grid_position.first.class
grid_position.first
grid_position
c
piece.possible_moves.include?(king_position)
king_position
c
exit
piece.possible_moves
piece.location
move_piece(start_pos, end_pos, piece)
end_pos
end_pos = select_destination(player, piece)
piece.location
piece = board.piece_at(start_pos)
start_pos
start_pos = select_piece(player)
c
piece.location
c
piece.location
c
piece.location
c
piece.location
c
piece.location
c
piece.location
c
piece.location
c
piece.location
c
king_position
exit
king_position
exit
king_position
c
end_loc
exit
a.location == [0,0]
a.location
exit
a
exit
a
a.possible_moves
a.board
a
a.grid
a
a.pieces
a
a.class
a.count
a
exit
piece
c
piece
exit
piece
